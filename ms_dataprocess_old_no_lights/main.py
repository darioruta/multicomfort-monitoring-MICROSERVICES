import json
import pandas as pd
from data_process import ComfortCalculator, FlaskApp
from flask import Flask, send_file

import numpy as np
import matplotlib.pyplot as plt

data = [
    [1550, 22.4, 1100, 44, 21.2, 82, 0.01, 350, "2022-01-01 12:02:20"],
    [1500, 22.0, 1200, 40, 22.4, 84, 0.20, 450, "2022-01-01 12:03:10"],
    [1500, 22.2, 1000, 41, 23.0, 90, 0.00, 250, "2022-01-01 12:05:33"],
    [1500, 22.4, 1250, 44, 21.7, 78, 0.00, 300, "2022-01-01 12:08:02"],
    [1500, 22.6, 1150, 42, 22.3, 88, 0.00, 500, "2022-01-01 12:12:06"],
    [1550, 22.4, 1100, 44, 21.2, 82, 0.01, 350, "2022-01-01 12:02:20"],
    [1500, 22.0, 1200, 40, 22.4, 84, 0.20, 450, "2022-01-01 13:03:10"],
    [1500, 22.2, 1000, 41, 23.0, 90, 0.00, 250, "2022-01-01 14:35:33"],
    [1500, 22.4, 1250, 44, 21.7, 78, 0.00, 300, "2022-01-01 15:08:02"],
    [1000, 22.6, 1150, 42, 22.3, 88, 0.00, 500, "2022-01-01 16:12:06"],
    [15050, 21.4, 1100, 44, 21.2, 82, 0.01, 350, "2022-01-02 12:02:20"],
    [1100, 23.0, 1200, 40, 22.4, 84, 0.20, 450, "2022-01-02 12:03:10"],
    [1200, 22.4, 1000, 41, 23.0, 90, 0.00, 250, "2022-01-02 12:05:33"],
    [1300, 21.2, 1250, 44, 21.7, 78, 0.00, 300, "2022-01-02 12:06:02"],
    [1000, 20.6, 1150, 42, 22.3, 88, 0.00, 500, "2022-01-02 12:12:06"],
    [1050, 22.4, 1100, 44, 21.2, 82, 0.01, 350, "2022-01-02 12:02:20"],
    [1100, 23.0, 1200, 40, 22.4, 84, 0.20, 450, "2022-01-02 13:03:10"],
    [1200, 21.2, 1000, 41, 23.0, 90, 0.00, 250, "2022-01-02 14:35:33"],
    [1300, 22.4, 1250, 44, 21.7, 78, 0.00, 300, "2022-01-02 15:08:02"],
    [1000, 25.6, 1150, 42, 22.3, 88, 0.00, 500, "2022-01-02 16:12:06"],
    [1050, 22.4, 1100, 44, 21.2, 82, 0.01, 350, "2022-01-03 12:02:20"],
    [1100, 24.0, 1200, 40, 22.4, 84, 0.20, 450, "2022-01-03 12:03:10"],
    [1200, 22.6, 1000, 41, 23.0, 90, 0.00, 250, "2022-01-03 12:05:33"],
    [1300, 22.4, 1250, 44, 21.7, 78, 0.00, 300, "2022-01-03 09:08:02"],
    [1000, 22.6, 1150, 42, 22.3, 88, 0.00, 500, "2022-01-03 09:12:06"],
    [1050, 21.4, 1100, 44, 21.2, 82, 0.01, 350, "2022-01-03 11:02:20"],
    [1100, 22.0, 1200, 40, 22.4, 84, 0.20, 450, "2022-01-03 11:03:10"],
    [1200, 22.2, 1000, 41, 23.0, 90, 0.00, 250, "2022-01-03 11:35:33"],
    [1500, 22.4, 1250, 44, 21.7, 78, 0.00, 300, "2022-01-03 10:08:02"],
    [1500, 20.6, 1150, 42, 22.3, 88, 0.00, 500, "2022-01-03 10:12:06"]
]


data2 = [[1050, 22.4, 1100, 44, 21.2, 82, 0.01, 350, "2022-01-01 12:02:20"],
    [1100, 22.0, 1200, 40, 22.4, 84, 0.20, 450, "2022-01-01 12:03:10"],
    [1200, 22.2, 1000, 41, 23.0, 90, 0.00, 250, "2022-01-01 12:05:33"],
    [1300, 22.4, 1250, 44, 21.7, 78, 0.00, 300, "2022-01-01 12:08:02"],
    [1000, 22.6, 1150, 42, 22.3, 88, 0.00, 500, "2022-01-01 12:12:06"],
    [1050, 22.4, 1100, 44, 21.2, 82, 0.01, 350, "2022-01-01 12:02:20"],
    [1100, 22.0, 1200, 40, 22.4, 84, 0.20, 450, "2022-01-01 13:03:10"],
    [1200, 22.2, 1000, 41, 23.0, 90, 0.00, 250, "2022-01-01 14:35:33"],
    [1300, 22.4, 1250, 44, 21.7, 78, 0.00, 300, "2022-01-01 15:08:02"],
    [1000, 22.6, 1150, 42, 22.3, 88, 0.00, 500, "2022-01-01 16:12:06"],
    [1050, 21.4, 1100, 44, 21.2, 82, 0.01, 350, "2022-01-02 12:02:20"],
    [1100, 23.0, 1200, 40, 22.4, 84, 0.20, 450, "2022-01-02 12:03:10"],
    [1200, 22.4, 1000, 41, 23.0, 90, 0.00, 250, "2022-01-02 12:05:33"],
    [1300, 21.2, 1250, 44, 21.7, 78, 0.00, 300, "2022-01-02 12:06:02"],
    [1000, 20.6, 1150, 42, 22.3, 88, 0.00, 500, "2022-01-02 12:12:06"],
    [1050, 22.4, 1100, 44, 21.2, 82, 0.01, 350, "2022-01-02 12:02:20"],
    [1100, 23.0, 1200, 40, 22.4, 84, 0.20, 450, "2022-01-02 13:03:10"],
    [1200, 21.2, 1000, 41, 23.0, 90, 0.00, 250, "2022-01-02 14:35:33"],
    [1300, 22.4, 1250, 44, 21.7, 78, 0.00, 300, "2022-01-02 15:08:02"],
    [1000, 25.6, 1150, 42, 22.3, 88, 0.00, 500, "2022-01-02 16:12:06"],
    [1050, 22.4, 1100, 44, 21.2, 82, 0.01, 350, "2022-01-01 17:02:20"],
    [1100, 22.0, 1200, 40, 22.4, 84, 0.20, 450, "2022-01-01 17:03:10"],
    [1200, 22.2, 1000, 41, 23.0, 90, 0.00, 250, "2022-01-01 17:05:33"],
    [1300, 22.4, 1250, 44, 21.7, 78, 0.00, 300, "2022-01-01 18:08:02"],
    [1000, 22.6, 1150, 42, 22.3, 88, 0.00, 500, "2022-01-01 18:12:06"],
    [1050, 22.4, 1100, 44, 21.2, 82, 0.01, 350, "2022-01-01 18:02:20"],
    [1100, 22.0, 1200, 40, 22.4, 84, 0.20, 450, "2022-01-01 19:03:10"],
    [1200, 22.2, 1000, 41, 23.0, 90, 0.00, 250, "2022-01-01 19:35:33"],
    [1300, 22.4, 1250, 44, 21.7, 78, 0.00, 300, "2022-01-01 19:08:02"],
    [1000, 22.6, 1150, 42, 22.3, 88, 0.00, 500, "2022-01-01 19:12:06"],
    [1050, 21.4, 1100, 44, 21.2, 82, 0.01, 350, "2022-01-02 20:02:20"],
    [1100, 23.0, 1200, 40, 22.4, 84, 0.20, 450, "2022-01-02 20:03:10"],
    [1200, 22.4, 1000, 41, 23.0, 90, 0.00, 250, "2022-01-02 20:05:33"],
    [1300, 21.2, 1250, 44, 21.7, 78, 0.00, 300, "2022-01-02 20:06:02"],
    [1000, 20.6, 1150, 42, 22.3, 88, 0.00, 500, "2022-01-02 21:12:06"],
    [1050, 22.4, 1100, 44, 21.2, 82, 0.01, 350, "2022-01-02 22:02:20"],
    [1100, 23.0, 1200, 40, 22.4, 84, 0.20, 450, "2022-01-02 22:03:10"],
    [1200, 21.2, 1000, 41, 23.0, 90, 0.00, 250, "2022-01-02 22:35:33"],
    [1300, 22.4, 1250, 44, 21.7, 78, 0.00, 300, "2022-01-02 22:08:02"]
]

def op_tmp_adding(df):
    op_tmp_list = []
    for index, row in df.iterrows():
        op_tmp_list.append((row['tmp']+row['mrt'])/2)
    return op_tmp_list


df = pd.DataFrame(data, columns=['co2', 'mrt', 'pm10', 'hum', 'tmp','acoustic', 'wind_speed', 'light', 'date'])
df['tmp_op'] = op_tmp_adding(df)
calc = ComfortCalculator(df)
data_sended = calc.main_run()

print(data_sended)


print('\n----- List Values -----')
print('db value : ', calc.get_acoustic())
print('mrt value : ', calc.get_mrt())
print('temp value : ', calc.get_tmp())
print('light value : ', calc.get_light())
print('pm10 value : ', calc.get_pm10())
print('co2 value : ', calc.get_co2())
print('humidity value : ', calc.get_humidity())
print('wind speed value : ', calc.get_wind_speed())
print('operative temperature: ', calc.get_op_temp())
print(' \n----- Comfort ----- ')
print('Acoustic Comfort : ', calc.acoustic_comfort())
print('Indoor Air Quality :', calc.indoor_air_quality())
print('Visual Comfort : ', calc.visual_comfort())
print('PPD and PMV values : ', calc.pmv_ppd())
print('Adaptive Model Computation : ', calc.adaptive_comfort_model())
print('Total Comfort : ', calc.total_comfort())

print('Noise Percentage: ', calc.noise_percentage())
print('Lux Medi: ', calc.lux_medi())
print('Ore Lux Sotto Soglia: ', calc.hour_poorly_illuminated())
print('CO2 out of range weekly: ', calc.co2_out_of_range())
print('DB over weekly: ', calc.db_out_of_range())
print('Comfrot Termico out of range weekly: ', calc.termal_comfort_out_of_range())
print('Overall Discomfort out of range weekly: ', calc.discomfort_out_of_range())




#calc.carrier_plot()
#if __name__ == '__main__':
#    websocket = FlaskApp()
#    websocket.run()




