# 400 lines

from logging import raiseExceptions
import sys
import threading
import time

import requests
import defineVariable as deVar
import numpy as np
import cherrypy_cors
import json
import cherrypy
import os
import os.path
from datetime import datetime

import defineURIMicroservices as deMicroServices
deMS = deMicroServices.de_microservices()

de = deVar.de()

#sys.path.append('D:\\POLITECNICO\\Magistrale\\A_IP\\project\\codice')
sys.path.append(os.path.abspath(os.getcwd()))
from communication_service_catalogue import ServiceCatalogueCommunication


class FlashDataprocess:
	exposed = True

	def __init__(self, main_ip, main_port):
		self.uris_available = deMS.show_allUris()

		self.main_ip = main_ip
		self.main_port = main_port
		
		self.autoGenerateData = threading.Thread(target=self.Do_Something_On_Other_Thread, name=setting[de.name])
		self.autoGenerateData.start()

	def Do_Something_On_Other_Thread(self):
		pass


	def OPTIONS(self, *uri, **param):
		cherrypy.response.status = 200
		cherrypy_cors.preflight(allowed_methods=['GET', 'POST', 'OPTIONS'])
		return "OK"

	@cherrypy.tools.json_out()
	def GET(self, *uri, **param):
		print("URL from cherrypy: " + str(cherrypy.url()))
		print("PARAM from cherrypy: " + str(param))
		print("PARAM.keys from cherrypy: " + str(list(param.keys())))
		print(uri)
		cherrypy.response.headers['Access-Control-Allow-Origin'] = '*'
		#cherrypy.response.headers['Access-Control-Allow-Headers'] = 'Origin, X-Requested-With, Content-Type, Accept, Authorization'
		cherrypy.response.headers['Access-Control-Allow-Headers'] = "append,delete,entries,foreach,get,has,keys,set,values,Authorization"
		cherrypy.response.headers['Access-Control-Allow-Methods'] = "POST, GET, OPTIONS, DELETE, PUT"

		cherrypy.response.status = 200
		cherrypy_cors.preflight(allowed_methods=['GET', 'POST', 'OPTIONS'])

		# URI ALLOWED
		if (uri, list(param.keys()),) == deMS.main:
			return f"{self.ID} -> mainPage -> correct built-in -> OK"
		elif (uri, list(param.keys()),) == deMS.GetDataFromSersor:
			data = f"GET {uri}"
			'''
			riempire come necessario
			'''
			return data
		else:
			print("ERRORE: URI NON PRESENTE -> se stai settando un valore ricordati di usare il PUT")

			# per far ritornare un file di testo HTML
			cherrypy.response.headers['Content-Type'] = 'text/html'
			return f"<p> Page Not Found -> Uri or parameters not correct </p> {self.uris_available}"

	@cherrypy.tools.json_in()
	@cherrypy.tools.json_out()
	def PUT(self, *uri, **param):
		print("URL from cherrypy: " + str(cherrypy.url()))
		print("PARAM from cherrypy: " + str(param))
		print("PARAM.keys from cherrypy: " + str(list(param.keys())))
		print(uri)
		cherrypy.response.headers['Access-Control-Allow-Origin'] = '*'
		#cherrypy.response.headers['Access-Control-Allow-Headers'] = 'Origin, X-Requested-With, Content-Type, Accept, Authorization'
		cherrypy.response.headers['Access-Control-Allow-Headers'] = "append,delete,entries,foreach,get,has,keys,set,values,Authorization"
		cherrypy.response.headers['Access-Control-Allow-Methods'] = "POST, GET, OPTIONS, DELETE, PUT"

		cherrypy.response.status = 200
		cherrypy_cors.preflight(allowed_methods=['GET', 'POST', 'OPTIONS'])

		if (uri, list(param.keys()),) == True:
			data = f"GET {uri}"
			'''
			riempire come necessario
			'''
			return data
		else:
			print("ERROR URI DELETE NOT PRESENT")
			# per far ritornare un file di testo HTML
			cherrypy.response.headers['Content-Type'] = 'text/html'
			return f"<p> Page Not Found -> Uri or parameters not correct </p> {self.uris_available}"


	@cherrypy.tools.json_out()
	def DELETE(self, *uri, **param):
		print("URL from cherrypy: " + str(cherrypy.url()))
		print("PARAM from cherrypy: " + str(param))
		print("PARAM.keys from cherrypy: " + str(list(param.keys())))
		print(uri)
		cherrypy.response.headers['Access-Control-Allow-Origin'] = '*'
		#cherrypy.response.headers['Access-Control-Allow-Headers'] = 'Origin, X-Requested-With, Content-Type, Accept, Authorization'
		cherrypy.response.headers['Access-Control-Allow-Headers'] = "append,delete,entries,foreach,get,has,keys,set,values,Authorization"
		cherrypy.response.headers['Access-Control-Allow-Methods'] = "POST, GET, OPTIONS, DELETE, PUT"

		cherrypy.response.status = 200
		cherrypy_cors.preflight(allowed_methods=['GET', 'POST', 'OPTIONS'])

		# URI ALLOWED
		return "Page Not Found -> Uri or parameters not correct"

	@cherrypy.tools.json_out()
	def POST(self, *uri, **param):
		print("URL from cherrypy: " + str(cherrypy.url()))
		print("PARAM from cherrypy: " + str(param))
		print("PARAM.keys from cherrypy: " + str(list(param.keys())))
		print(uri)
		cherrypy.response.headers['Access-Control-Allow-Origin'] = '*'
		#cherrypy.response.headers['Access-Control-Allow-Headers'] = 'Origin, X-Requested-With, Content-Type, Accept, Authorization'
		cherrypy.response.headers['Access-Control-Allow-Headers'] = "append,delete,entries,foreach,get,has,keys,set,values,Authorization"
		cherrypy.response.headers['Access-Control-Allow-Methods'] = "POST, GET, OPTIONS, DELETE, PUT"

		cherrypy.response.status = 200
		cherrypy_cors.preflight(allowed_methods=['GET', 'POST', 'OPTIONS'])
		# URI ALLOWED
		return "Page Not Found -> Uri or parameters not correct"


if __name__ == "__main__":

	settings_path = "./ms_flash_dataprocess/settings.json"
	setting = json.load(open(settings_path))
    # appendo il log automatico dopo ogni X secondi al service Catalog
	# process Retrieve Data
	scc = ServiceCatalogueCommunication(settings_path)
	
	updateResourceCatalog = threading.Thread(target=scc.ping_service_catalogue, name=setting[de.name])  # ricordarsi che non ci vanno i parametri , Ã© come se fosse un altro main doe devi andarti a prendere le info direttamente da la 
	# PING DISATTIVATO 
	'''updateServiceCatalog.start()'''

    # parte dedicata a MQTT (se necessaria per i sensori)
    
    
    
    # parte dedicata a REST
    
	# Root static dir is this file's directory.
	static_dir = os.path.dirname(os.path.abspath(__file__))
	conf = {
		'/': {
			'request.dispatch': cherrypy.dispatch.MethodDispatcher(),
			'tools.sessions.on': True,
			#'tools.staticdir.root':os.path.abspath(os.getcwd())   # ORIGIANL
			'tools.staticdir.root': static_dir
		}
	}
	# instanzio primo sensore
	setting = json.load(open(settings_path))
	tutto_ok = False
	
	cherrypy.tree.mount(FlashDataprocess( setting[de.main_ip], setting[de.main_port]), '/', conf)
		
	cherrypy.config.update(
		{'server.socket_host': setting[de.localhost], 'server.socket_port': setting[de.port]})
	de.print_name_cmd_2_lines()
	cherrypy.engine.start()
	cherrypy.engine.block()
